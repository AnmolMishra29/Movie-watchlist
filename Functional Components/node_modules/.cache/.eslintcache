[{"C:\\web development\\movies-watchlist\\Functional Components\\src\\index.js":"1","C:\\web development\\movies-watchlist\\Functional Components\\src\\reportWebVitals.js":"2","C:\\web development\\movies-watchlist\\Functional Components\\src\\App.js":"3","C:\\web development\\movies-watchlist\\Functional Components\\src\\Components\\Banner.js":"4","C:\\web development\\movies-watchlist\\Functional Components\\src\\Components\\Navbar.js":"5","C:\\web development\\movies-watchlist\\Functional Components\\src\\Components\\Favorites.js":"6","C:\\web development\\movies-watchlist\\Functional Components\\src\\Components\\Body.js":"7","C:\\web development\\movies-watchlist\\Functional Components\\src\\Components\\About.js":"8","C:\\web development\\movies-watchlist\\Functional Components\\src\\Components\\Search.js":"9"},{"size":505,"mtime":1663237472366,"results":"10","hashOfConfig":"11"},{"size":375,"mtime":1663237472368,"results":"12","hashOfConfig":"11"},{"size":706,"mtime":1663237472342,"results":"13","hashOfConfig":"11"},{"size":2744,"mtime":1663237472346,"results":"14","hashOfConfig":"11"},{"size":6475,"mtime":1663237472350,"results":"15","hashOfConfig":"11"},{"size":15305,"mtime":1663237472349,"results":"16","hashOfConfig":"11"},{"size":38979,"mtime":1663237472347,"results":"17","hashOfConfig":"11"},{"size":3156,"mtime":1663249878087,"results":"18","hashOfConfig":"11"},{"size":21138,"mtime":1663237472352,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"vhuz4g",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"23"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"23"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"23"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"23"},"C:\\web development\\movies-watchlist\\Functional Components\\src\\index.js",[],[],["52","53"],"C:\\web development\\movies-watchlist\\Functional Components\\src\\reportWebVitals.js",[],[],"C:\\web development\\movies-watchlist\\Functional Components\\src\\App.js",[],[],"C:\\web development\\movies-watchlist\\Functional Components\\src\\Components\\Banner.js",["54","55","56","57","58"],[],"import { CircularProgress } from '@mui/material';\r\nimport axios from 'axios';\r\nimport React, { useEffect, useRef, useState } from 'react'\r\nimport { useSwipeable } from 'react-swipeable';\r\n\r\nexport default function Banner() {\r\n    const [movie,setMovie] = useState(null);\r\n    const [index,setIndex] = useState(0);\r\n    const timeoutRef = useRef(null);\r\n\r\n    function resetTimeout(){\r\n        if(timeoutRef.current){\r\n            clearTimeout(timeoutRef.current)\r\n        }\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const res = axios.get(`https://api.themoviedb.org/3/trending/all/day?api_key=${process.env.REACT_APP_API_KEY}`).then((res)=>{\r\n            let data =[...res.data.results].slice(0,6);\r\n            setMovie(data)\r\n        })\r\n      \r\n    },[])\r\n    useEffect(()=>{\r\n        resetTimeout();\r\n        timeoutRef.current = setTimeout(()=> setIndex((prevIndex)=>\r\n        prevIndex == 5?0:prevIndex+1\r\n        ),4500)\r\n        return ()=>{resetTimeout()};\r\n    },[index]);\r\n\r\n    const handlers = useSwipeable({\r\n        onSwipedLeft: () => {\r\n            let nextIndex = index==5?0:index+1\r\n            setIndex(nextIndex)\r\n        },\r\n        onSwipedRight:() => {\r\n            let prevIndex = index==0?5:index-1\r\n            setIndex(prevIndex) \r\n        },\r\n        delta: 10,                            // min distance(px) before a swipe starts. *See Notes*\r\n        preventDefaultTouchmoveEvent: false,  // call e.preventDefault *See Details*\r\n        trackTouch: true,                     // track touch input\r\n        trackMouse: false,                    // track mouse input\r\n        rotationAngle: 0\r\n      });\r\n  return (\r\n          <>\r\n          {movie == null?<div style={{width:'100%',textAlign:'center'}}><CircularProgress/></div>:\r\n       <>\r\n\r\n       <div className=\"slideshow\" >\r\n           <div className=\"slideshowslider \" {...handlers} style={{ transform: `translate3d(${-index * 100}%, 0, 0)` }}>\r\n               {movie.map((mov, index) => (<div className=\" card banner-card slide \" key={index}>\r\n                   <img src={`https://image.tmdb.org/t/p/original${mov.backdrop_path}`} alt={mov.title} className=\"card-img-top banner-img\" style={{ objectFit: 'cover' }}  />\r\n                   <h1 className=\"card-title banner-title\">{mov.media_type == 'tv' ? mov.name : mov.title}</h1>\r\n                   <p className=\"card-text banner-text\">{mov.overview}</p></div>))}\r\n           </div>\r\n           <div className=\"slideshowDots\">\r\n               {movie.map((_, idx) => (\r\n                   <div key={idx} className={`slideshowDot${index === idx ? \" active\" : \"\"}`} \r\n                   onClick={()=>setIndex(idx)}></div>\r\n               ))}\r\n           </div>\r\n\r\n       </div>\r\n\r\n\r\n\r\n\r\n\r\n   </>\r\n}</>\r\n  )\r\n}\r\n","C:\\web development\\movies-watchlist\\Functional Components\\src\\Components\\Navbar.js",[],[],"C:\\web development\\movies-watchlist\\Functional Components\\src\\Components\\Favorites.js",["59","60","61","62","63","64","65","66","67","68","69","70","71"],[],"import React, { useEffect, useRef, useState } from 'react'\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport { Button, CircularProgress } from '@mui/material';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport { IconButton, InputAdornment, TextField, CardActionArea } from '@mui/material'\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport YouTubeIcon from '@mui/icons-material/YouTube';\r\nimport { styled } from '@mui/material/styles';\r\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\r\nimport { createTheme, } from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport Typography from '@mui/material/Typography';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Slide from '@mui/material/Slide';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport posterna from '../Icons/posterna.jpg'\r\nimport TableRow from '@mui/material/TableRow';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst BpIcon = styled('span')(({ theme }) => ({\r\n  borderRadius: 3,\r\n  width: 16,\r\n  height: 16,\r\n  boxShadow:\r\n    theme.palette.mode === 'dark'\r\n      ? '0 0 0 1px rgb(16 22 26 / 40%)'\r\n      : 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\r\n  backgroundColor: theme.palette.mode === 'dark' ? '#394b59' : '#f5f8fa',\r\n  backgroundImage:\r\n    theme.palette.mode === 'dark'\r\n      ? 'linear-gradient(180deg,hsla(0,0%,100%,.05),hsla(0,0%,100%,0))'\r\n      : 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\r\n  '.Mui-focusVisible &': {\r\n    outline: '2px auto rgba(19,124,189,.6)',\r\n    outlineOffset: 2,\r\n  },\r\n  'input:hover ~ &': {\r\n    backgroundColor: theme.palette.mode === 'dark' ? '#30404d' : '#ebf1f5',\r\n  },\r\n  'input:disabled ~ &': {\r\n    boxShadow: 'none',\r\n    background:\r\n      theme.palette.mode === 'dark' ? 'rgba(57,75,89,.5)' : 'rgba(206,217,224,.5)',\r\n  },\r\n}));\r\n\r\nconst BpCheckedIcon = styled(BpIcon)({\r\n  backgroundColor: '#137cbd',\r\n  backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\r\n  '&:before': {\r\n    display: 'block',\r\n    width: 16,\r\n    height: 16,\r\n    backgroundImage:\r\n      \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath\" +\r\n      \" fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 \" +\r\n      \"1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\\\")\",\r\n    content: '\"\"',\r\n  },\r\n  'input:hover ~ &': {\r\n    backgroundColor: '#106ba3',\r\n  },\r\n});\r\n\r\nexport default function Favorites() {\r\n\r\n  const [genre, setGenre] = useState([])\r\n  const [filterGenre, setFilterGenre] = useState([]);\r\n  const [dialogCheckBox, setDialogCheckBox] = useState([]);\r\n  const myRef = useRef(null)\r\n  const [open, setOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false)\r\n  const [selectedMovie, setSelectedMovie] = useState([])\r\n  const [movies, setMovies] = useState([])\r\n  const [currPage, setCurrPage] = useState(0)\r\n  const [filterarr, setFirterarr] = useState([])\r\n  const theme = createTheme();\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const matches = useMediaQuery(theme.breakpoints.up('md'));\r\n  const [rowsPerPageVal, setRowsPerPageVal] = useState(5)\r\n  const [flag, setFlag] = useState(false)\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoading(true)\r\n    let data = JSON.parse(localStorage.getItem('fav') || \"[]\")\r\n    let temp = [];\r\n    if (data) {\r\n      data.forEach((movieObj) => {\r\n        movieObj.genres.forEach((genreitem) => {\r\n\r\n          if (!temp.includes(genreitem.name)) {\r\n            temp.push((genreitem.name))\r\n          }\r\n        })\r\n      })\r\n    }\r\n    temp.sort()\r\n    setMovies([...data])\r\n    setSelectedMovie([...data])\r\n    setGenre([...temp])\r\n    setLoading(false)\r\n  }, [])\r\n\r\n  const handleAddDialog = async (e) => {\r\n    if (!e.target.checked) {\r\n      let parr = []\r\n      parr = dialogCheckBox.filter((element) => e.target.name != element)\r\n      await setDialogCheckBox([...parr])\r\n\r\n    } else {\r\n      await setDialogCheckBox([...dialogCheckBox, e.target.name])\r\n    }\r\n  }\r\n\r\n  const handleClearAll = () => {\r\n    setDialogCheckBox([])\r\n    setFilterGenre([])\r\n  }\r\n  const openTrailer = (key) => {\r\n    let win = window.open(`https://www.youtube.com/watch?v=${key}`)\r\n    win.focus();\r\n  }\r\n  const handleFiltergenre = () => {\r\n    setFilterGenre([...dialogCheckBox])\r\n    handleClose();\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (filterGenre.length != 0) {\r\n      let temp = [];\r\n      let flag = false;\r\n      movies.forEach((movieObj) => {\r\n        movieObj.genres.forEach((genreitem) => {\r\n          if (filterGenre.includes(genreitem.name)) {\r\n            flag = true\r\n          }\r\n        })\r\n        if (flag) {\r\n          temp.push(movieObj)\r\n          flag = false;\r\n        }\r\n      })\r\n\r\n      setSelectedMovie([...temp])\r\n    }\r\n    else {\r\n      setSelectedMovie([...movies])\r\n    }\r\n  }, [filterGenre, movies])\r\n\r\n  const cleanup = () => {\r\n    setSearchQuery(\"\")\r\n    setFlag(!flag)\r\n  }\r\n\r\n\r\n  const handleRowsperpage = (event) => {\r\n    setCurrPage(0)\r\n    if (event.target.value > filterarr.length) {\r\n      setRowsPerPageVal(-1)\r\n    }\r\n    else {\r\n      setRowsPerPageVal(event.target.value)\r\n    }\r\n  }\r\n\r\n\r\n  useEffect(() => {\r\n    let limit = rowsPerPageVal\r\n    if (limit == -1) {\r\n      limit = selectedMovie.length\r\n    }\r\n    let si = (currPage) * limit;\r\n    let ei = si + parseInt(limit)\r\n    if (searchQuery == \"\") {\r\n      let arr = selectedMovie.slice(si, ei)\r\n      setFirterarr(arr)\r\n    }\r\n    else {\r\n      let arr = filterarr.slice(si, ei)\r\n      setFirterarr(arr)\r\n    }\r\n\r\n  }, [currPage, rowsPerPageVal, selectedMovie, flag])\r\n\r\n  useEffect(() => {\r\n    if (searchQuery != \"\") {\r\n      let arr = selectedMovie;\r\n      arr = selectedMovie.filter((movieObj) => {\r\n        if (movieObj.media_type == 'tv') {\r\n          var title = movieObj.name.toLowerCase();\r\n        }\r\n        else {\r\n          var title = movieObj.title.toLowerCase();\r\n        }\r\n        return title.includes(searchQuery.toLowerCase())\r\n      })\r\n      setFirterarr(arr)\r\n    }\r\n    else {\r\n      setFlag(!flag)\r\n    }\r\n\r\n  }, [searchQuery])\r\n\r\n  const handleDelete =(id)=>{\r\n      let data = movies.filter((movieObj)=> movieObj.id != id)\r\n      localStorage.setItem('fav',JSON.stringify(data))\r\n      let temp = [];\r\n      if (data) {\r\n        data.forEach((movieObj) => {\r\n          movieObj.genres.forEach((genreitem) => {\r\n  \r\n            if (!temp.includes(genreitem.name)) {\r\n              temp.push((genreitem.name))\r\n            }\r\n          })\r\n        })\r\n      }\r\n      temp.sort()\r\n      setMovies([...data])\r\n      setSelectedMovie([...data])\r\n      setGenre([...temp])\r\n  }\r\n\r\n\r\n\r\n  return (\r\n\r\n    <div ref={myRef}>{loading ? <CircularProgress /> :\r\n      <div className=\"main\" style={{ padding: '1rem' }}>\r\n        <div className=\"row\">\r\n\r\n          <div className=\"col-lg-3 col-sm-12\">\r\n            <div style={{ width: '90%', display: 'flex', flexDirection: 'column' }}>\r\n\r\n              {matches ? <><div><Button sx={{ marginRight: '0.2rem', marginBottom: '0.2rem' }} variant=\"contained\" startIcon={<CheckBoxOutlineBlankIcon />} onClick={handleClearAll} >Cancel All</Button>\r\n                <Button variant=\"contained\" onClick={handleFiltergenre}>Apply Filter</Button></div>\r\n                <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }} direction=\"column\" alignItems=\"left\" sx={{ maxHeight: '75vh', overflowY: 'scroll', display: 'block', marginTop: '0.7rem' }}>\r\n                  {\r\n                    (genre).map((key, index) => (\r\n                      <Grid item xs={6} md={4} key={index} >\r\n                        <FormControlLabel control={<Checkbox sx={{ '& .MuiSvgIcon-root': { fontSize: 28 } }} color=\"default\"\r\n                          checkedIcon={<BpCheckedIcon />} icon={<BpIcon />} name={key} onClick={(e) => handleAddDialog(e)} checked={dialogCheckBox.includes(key)} />} label={key} />\r\n                      </Grid>\r\n                    ))\r\n                  }\r\n                </Grid></> : <div style={{ display: 'flex', justifyContent: 'right', marginBottom: '0.7rem' }}><Button variant=\"contained\" startIcon={<FilterListIcon />} onClick={handleClickOpen} >Filter</Button></div>}\r\n            </div>\r\n            <Dialog\r\n              open={open}\r\n              maxWidth={\"lg\"}\r\n              TransitionComponent={Transition}\r\n              scroll={\"paper\"}\r\n              onClose={handleClose}\r\n              aria-describedby=\"alert-dialog-slide-description\"\r\n            >\r\n              <DialogTitle style={{ margin: '2%', padding: '0px 9px' }}>\r\n                <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n                  <Typography variant=\"div\">Filter By Genre</Typography>\r\n                  <CloseIcon onClick={handleClose} style={{ cursor: 'pointer' }} />\r\n                </Grid>\r\n              </DialogTitle>\r\n              <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-slide-description\">\r\n\r\n                  <div style={{ display: 'flex', justifyContent: 'left', marginTop: '0.5rem', marginBottom: '0.5rem' }}>\r\n                    <Button variant=\"contained\" startIcon={<CheckBoxOutlineBlankIcon />} onClick={handleClearAll}>Clear All</Button></div>\r\n\r\n                  <FormGroup>\r\n                    <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }} direction=\"row\" alignItems=\"center\">\r\n                      {\r\n                        (genre).map((key, index) => (\r\n                          <Grid item xs={6} md={4} key={index} >\r\n\r\n                            <FormControlLabel control={<Checkbox sx={{ '& .MuiSvgIcon-root': { fontSize: 28 } }} color=\"default\"\r\n                              checkedIcon={<BpCheckedIcon />} icon={<BpIcon />} name={key} onClick={(e) => handleAddDialog(e)} checked={dialogCheckBox.includes(key)} />} label={key} />\r\n                          </Grid>\r\n                        ))\r\n                      }\r\n                    </Grid>\r\n                  </FormGroup>\r\n                </DialogContentText>\r\n              </DialogContent>\r\n              <DialogActions>\r\n                <Button variant=\"contained\" onClick={() => { handleClearAll(); handleClose(); }}>Cancel</Button>\r\n                <Button variant=\"contained\" onClick={handleFiltergenre}>Apply Filter</Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n          </div>\r\n          <div className=\"col-lg-9 col-sm-12 favourite-table\">\r\n            <div className=\"row\">\r\n              <TextField label=\"Search\"\r\n                placeholder=\"Type your query here\"\r\n                type=\"text\"\r\n                sx={{ width: '70vw', margin: '1.2rem' }}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                onChange={(e) => setSearchQuery(e.target.value)}\r\n                value={searchQuery}\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <SearchIcon />\r\n                    </InputAdornment>\r\n                  ),\r\n                  endAdornment: searchQuery && (\r\n                    <IconButton\r\n                      aria-label=\"toggle password visibility\"\r\n                      onClick={cleanup}\r\n                    ><CancelIcon /></IconButton>\r\n                  )\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"row\">\r\n              <table className=\"table table-hover \">\r\n                <thead style={{ textAlign: 'center' }}>\r\n                  <tr>\r\n                    <th scope=\"col\" colSpan=\"2\">Title</th>\r\n                    <th scope=\"col\">Rating</th>\r\n                    <th scope=\"col\" >Trailer</th>\r\n                    <th scope=\"col\"  >Remove</th>\r\n                    <th scope=\"col\"></th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody >\r\n                  {selectedMovie != null ? filterarr.map((movieObj, index) => (\r\n                    <tr key={index}>\r\n\r\n                      <td ><img src={movieObj.poster_path ? `https://image.tmdb.org/t/p/original${movieObj.poster_path}` : posterna} style={{ height: '4rem', width: '3rem' }} alt=\"Image\" /></td>\r\n                      <td>{movieObj.media_type == \"tv\" ? movieObj.name : movieObj.title}</td>\r\n                      <td style={{ textAlign: 'center' }}>&#11088;{movieObj.vote_average}</td>\r\n                      <td style={{ textAlign: 'center' }}><Button variant='contained' color=\"error\" startIcon={<YouTubeIcon />} disabled={movieObj.trailer == null} onClick={() => openTrailer(movieObj.trailer)} sx={matches ? { marginRight: '2rem' } : {}}>{movieObj.trailer != null ? \"Trailer\" : \"Trailer N/A\"}</Button></td>\r\n                      <td style={{ textAlign: 'center' }}><Button variant=\"contained\" color=\"error\" onClick={()=> handleDelete(movieObj.id)} >Remove</Button></td>\r\n\r\n                    </tr>\r\n                  )) : <></>}\r\n                  <TableRow>\r\n                    <TablePagination\r\n                      sx={{ alignItems: 'center' }}\r\n                      rowsPerPageOptions={[5, 10, 25, { label: 'All', value: -1 }]}\r\n                      count={selectedMovie.length}\r\n                      rowsPerPage={parseInt(rowsPerPageVal)}\r\n                      showFirstButton={true}\r\n                      showLastButton={true}\r\n                      page={currPage}\r\n                      SelectProps={{\r\n                        inputProps: {\r\n                          'aria-label': 'rows per page',\r\n                        },\r\n                        native: true,\r\n                      }}\r\n                      onPageChange={(e, v) => setCurrPage(v)}\r\n                      onRowsPerPageChange={handleRowsperpage}\r\n                    // ActionsComponent={TablePaginationActions}\r\n                    />\r\n\r\n\r\n\r\n                  </TableRow>\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n            <nav aria-label=\"Page navigation example\">\r\n              <ul className=\"pagination\">\r\n                {\r\n                  // pagesArr.map((page) => (\r\n\r\n                  //     <li className=\"page-item\"><a className=\"page-link\" onClick={() => this.handlePageChange(page)} >{page}</a></li>\r\n                  // ))\r\n                }\r\n\r\n              </ul>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    }</div>\r\n\r\n  )\r\n}\r\n","C:\\web development\\movies-watchlist\\Functional Components\\src\\Components\\Body.js",["72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99"],[],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { useSwipeable } from 'react-swipeable';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport FilterListIcon from '@mui/icons-material/FilterList';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport TrendingIcon from '../Icons/trending.png';\r\nimport CameraIcon from '../Icons/camera.png';\r\nimport TvshowIcon from '../Icons/tv-show.png'\r\nimport axios from 'axios';\r\nimport Card from '@mui/material/Card';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport { Button, CardActionArea, CardContent, TablePagination } from '@mui/material';\r\nimport Typography from '@mui/material/Typography';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogContentText from '@mui/material/DialogContentText';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport Slide from '@mui/material/Slide';\r\nimport Grid from \"@mui/material/Grid\";\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport { styled } from '@mui/material/styles';\r\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\r\nimport ReactStars from \"react-rating-stars-component\";\r\nimport Badge from '@mui/material/Badge';\r\nimport YouTubeIcon from '@mui/icons-material/YouTube';\r\nimport Carousel from 'react-multi-carousel';\r\nimport 'react-multi-carousel/lib/styles.css';\r\nimport default_dp from '../Icons/default_dp.jpg'\r\nimport posterna from '../Icons/posterna.jpg'\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\r\nimport SortIcon from '@mui/icons-material/Sort';\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst BpIcon = styled('span')(({ theme }) => ({\r\n    borderRadius: 3,\r\n    width: 16,\r\n    height: 16,\r\n    boxShadow:\r\n        theme.palette.mode === 'dark'\r\n            ? '0 0 0 1px rgb(16 22 26 / 40%)'\r\n            : 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\r\n    backgroundColor: theme.palette.mode === 'dark' ? '#394b59' : '#f5f8fa',\r\n    backgroundImage:\r\n        theme.palette.mode === 'dark'\r\n            ? 'linear-gradient(180deg,hsla(0,0%,100%,.05),hsla(0,0%,100%,0))'\r\n            : 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\r\n    '.Mui-focusVisible &': {\r\n        outline: '2px auto rgba(19,124,189,.6)',\r\n        outlineOffset: 2,\r\n    },\r\n    'input:hover ~ &': {\r\n        backgroundColor: theme.palette.mode === 'dark' ? '#30404d' : '#ebf1f5',\r\n    },\r\n    'input:disabled ~ &': {\r\n        boxShadow: 'none',\r\n        background:\r\n            theme.palette.mode === 'dark' ? 'rgba(57,75,89,.5)' : 'rgba(206,217,224,.5)',\r\n    },\r\n}));\r\n\r\nconst BpIcon2 = styled('span')(({ theme }) => ({\r\n    borderRadius: '50%',\r\n    width: 16,\r\n    height: 16,\r\n    boxShadow:\r\n      theme.palette.mode === 'dark'\r\n        ? '0 0 0 1px rgb(16 22 26 / 40%)'\r\n        : 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\r\n    backgroundColor: theme.palette.mode === 'dark' ? '#394b59' : '#f5f8fa',\r\n    backgroundImage:\r\n      theme.palette.mode === 'dark'\r\n        ? 'linear-gradient(180deg,hsla(0,0%,100%,.05),hsla(0,0%,100%,0))'\r\n        : 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\r\n    '.Mui-focusVisible &': {\r\n      outline: '2px auto rgba(19,124,189,.6)',\r\n      outlineOffset: 2,\r\n    },\r\n    'input:hover ~ &': {\r\n      backgroundColor: theme.palette.mode === 'dark' ? '#30404d' : '#ebf1f5',\r\n    },\r\n    'input:disabled ~ &': {\r\n      boxShadow: 'none',\r\n      background:\r\n        theme.palette.mode === 'dark' ? 'rgba(57,75,89,.5)' : 'rgba(206,217,224,.5)',\r\n    },\r\n  }));\r\n\r\nconst BpCheckedIcon2 = styled(BpIcon)({\r\n    backgroundColor: '#137cbd',\r\n    backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\r\n    borderRadius:\"50%\",\r\n    '&:before': {\r\n        display: 'block',\r\n        width: 16,\r\n        height: 16,\r\n        \r\n        backgroundImage:\r\n            \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath\" +\r\n            \" fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 \" +\r\n            \"1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\\\")\",\r\n        content: '\"\"',\r\n    },\r\n    'input:hover ~ &': {\r\n        backgroundColor: '#106ba3',\r\n    },\r\n});\r\n\r\nconst BpCheckedIcon = styled(BpIcon)({\r\n    backgroundColor: '#137cbd',\r\n    backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\r\n    '&:before': {\r\n      display: 'block',\r\n      width: 16,\r\n      height: 16,\r\n      backgroundImage:\r\n        \"url(\\\"data:image/svg+xml;charset=utf-8,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3E%3Cpath\" +\r\n        \" fill-rule='evenodd' clip-rule='evenodd' d='M12 5c-.28 0-.53.11-.71.29L7 9.59l-2.29-2.3a1.003 \" +\r\n        \"1.003 0 00-1.42 1.42l3 3c.18.18.43.29.71.29s.53-.11.71-.29l5-5A1.003 1.003 0 0012 5z' fill='%23fff'/%3E%3C/svg%3E\\\")\",\r\n      content: '\"\"',\r\n    },\r\n    'input:hover ~ &': {\r\n      backgroundColor: '#106ba3',\r\n    },\r\n  });\r\n  \r\n\r\nfunction BpRadio(props) {\r\n    return (\r\n      <Radio\r\n        sx={{\r\n          '&:hover': {\r\n            bgcolor: 'transparent',\r\n          },\r\n        }}\r\n        disableRipple\r\n        color=\"default\"\r\n        checkedIcon={<BpCheckedIcon2 />}\r\n        icon={<BpIcon2 />}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n\r\n\r\nconst StyledBadge = styled(Badge)({\r\n    \"& .MuiBadge-badge\": {\r\n        color: \"white\",\r\n        padding: \"0.4rem\",\r\n        fontSize: \"0.9rem\",\r\n        top: '1.2rem',\r\n        right: '1.5rem',\r\n        textShadow: \"\\\r\n      0.05em 0 black,\\\r\n      0 0.05em black,\\\r\n      -0.05em 0 black,\\\r\n      0 -0.05em black,\\\r\n      -0.05em -0.05em black,\\\r\n      -0.05em 0.05em black,\\\r\n      0.05em -0.05em black,\\\r\n      0.05em 0.05em black\"\r\n\r\n    }\r\n});\r\nexport default function Body() {\r\n    const theme = createTheme();\r\n    const [open, setOpen] = React.useState(false);\r\n    const [open2, setOpen2] = React.useState(false);\r\n    const [open3, setOpen3] = React.useState(false);\r\n    const myRef = useRef(null)\r\n    const matches = useMediaQuery(theme.breakpoints.up('sm'));\r\n    const [currentTab, setCurrentTab] = useState(0);\r\n    const [currPage, setCurrPage] = useState(1);\r\n    const [totalPages, setTotalPages] = useState(1);\r\n    const [movies, setMovies] = useState(null);\r\n    const [dialogCheckBox, setDialogCheckBox] = useState([]);\r\n    const [filterGenre, setFilterGenre] = useState([]);\r\n    const [modalObj, setModalObj] = useState(null);\r\n    const [mediaType, setMediaType] = useState(null);\r\n    const [trailer, setTrailer] = useState(null);\r\n    const [cast, setCast] = useState([]);\r\n    const [watchpro, setWatchpro] = useState([]);\r\n    const [recommendation , setRecommendation] = useState([]);\r\n    const [favorites,setFavorites] = useState([])\r\n    const [currentSort,setCurrentSort] = useState(0)\r\n    const [tempSort,setTempSort] = useState(0)\r\n\r\n    let genreMovIds = { 28: 'Action', 12: 'Adventure', 16: 'Animation', 35: 'Comedy', 80: 'Crime', 99: 'Documentary', 18: 'Drama', 10751: 'Family', 14: 'Fantasy', 36: 'History', 27: 'Horror', 10402: 'Music', 9648: 'Mystery', 10749: 'Romance', 878: 'Sci-fi', 10770: 'TV', 53: 'Thriller', 10752: 'War', 37: 'Western' };\r\n    let genreTvIds = { 10759: 'Action & Adventure', 16: 'Animation', 35: 'Comedy', 80: 'Crime', 99: 'Documentary', 18: 'Drama', 10751: 'Family', 10762: 'Kids', 9648: 'Mystery', 10763: 'News', 10764: 'Reality', 10765: 'Sci-Fi & Fantasy', 10766: 'Soap', 10767: 'Talk', 10768: 'War & Politics', 37: 'Western' };\r\n    const sortOrder = [\"Popularity\",\"Title (A-Z)\",\"Title(Z-A)\",\"Rating (High To Low)\",\"Rating (Low To High)\"]\r\n    const responsive = {\r\n        superLargeDesktop: {\r\n            // the naming can be any, depends on you.\r\n            breakpoint: { max: 4000, min: 3000 },\r\n            items: 7,\r\n            slidesToSlide:6\r\n        },\r\n        desktop: {\r\n            breakpoint: { max: 3000, min: 900 },\r\n            items: 6,\r\n            slidesToSlide:5\r\n        },\r\n        tablet: {\r\n            breakpoint: { max: 900, min: 700 },\r\n            items: 4,\r\n            slidesToSlide:3\r\n        },\r\n        middle:{\r\n            breakpoint: { max: 700, min: 563 },\r\n            items: 3,\r\n            slidesToSlide:2\r\n        },\r\n        mobile: {\r\n            breakpoint: { max: 563 , min: 0 },\r\n            items: 2,\r\n            slidesToSlide:2\r\n        }\r\n    };\r\n    useEffect(()=>{\r\n        const setDefaultVal =async()=>{\r\n        await setCurrentSort(0);\r\n        await setFilterGenre([])}\r\n        setDefaultVal();\r\n    },[currentTab])\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n    const handleClickOpen2 = () => {\r\n        setOpen2(true);\r\n    };\r\n    const handleClickOpen3 = () => {\r\n        setOpen3(true);\r\n        setTempSort(currentSort)\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n        setDialogCheckBox([])\r\n    };\r\n    const handleClose3 = () => {\r\n        setOpen3(false);\r\n    };\r\n    const handleClose2 = () => {\r\n        setOpen2(false);\r\n        setModalObj(null)\r\n        setTrailer(null)\r\n        setMediaType(null)\r\n        setCast([])\r\n        setWatchpro([])\r\n        setRecommendation([])\r\n    };\r\n    \r\n\r\n    useEffect(() => {\r\n        const getMovies = async () => {\r\n            var apiLink = \"\"\r\n            if (currentTab == 0) {\r\n                apiLink = (`https://api.themoviedb.org/3/trending/all/week?api_key=${process.env.REACT_APP_API_KEY}&page=${currPage}`)\r\n            }\r\n            else if (currentTab == 1) {\r\n                const sortkey = [\"sort_by=popularity.desc\",\"sort_by=title.asc\",\"sort_by=title.desc\",\"sort_by=vote_average.desc\",\"sort_by=vote_average.asc\"]\r\n                apiLink = (`https://api.themoviedb.org/3/discover/movie?api_key=${process.env.REACT_APP_API_KEY}&page=${currPage}&with_genres=${filterGenre.join(\",\")}&vote_count.gte=50&${sortkey[currentSort]}`)\r\n            }\r\n\r\n            else {\r\n                const sortkey = [\"sort_by=popularity.desc\",\"sort_by=name.asc\",\"sort_by=name.desc\",\"sort_by=vote_average.desc\",\"sort_by=vote_average.asc\"]\r\n                apiLink = (`https://api.themoviedb.org/3/discover/tv?api_key=${process.env.REACT_APP_API_KEY}&page=${currPage}&with_genres=${filterGenre.join(\",\")}&vote_count.gte=50&${sortkey[currentSort]}`)\r\n            }\r\n            const res = await axios.get(apiLink)\r\n            let data = res.data.results\r\n            await setTotalPages(Math.min(res.data.total_pages, 100))\r\n            await setMovies([...data])\r\n        }\r\n        getMovies();\r\n    }, [currentTab, currPage, filterGenre,currentSort])\r\n\r\n    useEffect(() => {\r\n        myRef.current.scrollIntoView({\r\n            behavior: \"smooth\"\r\n        })\r\n    }, [currPage])\r\n\r\n    useEffect(()=>{\r\n        let fav = JSON.parse(localStorage.getItem('fav') || \"[]\")\r\n        fav = fav.map((m) => m.id)\r\n        setFavorites([...fav])\r\n    },[])\r\n\r\n    const handleAddDialog = async (e) => {\r\n        if (!e.target.checked) {\r\n            let parr = []\r\n            parr = dialogCheckBox.filter((element) => e.target.name != element)\r\n            await setDialogCheckBox([...parr])\r\n\r\n        } else {\r\n            await setDialogCheckBox([...dialogCheckBox, e.target.name])\r\n        }\r\n    }\r\n\r\n    const handleClearAll = () => {\r\n        setDialogCheckBox([])\r\n    }\r\n    const handleSorting =()=>{\r\n        setCurrentSort(tempSort)\r\n        handleClose3();\r\n    }\r\n\r\n\r\n    const handleFiltergenre = () => {\r\n        setFilterGenre([...dialogCheckBox])\r\n        handleClose();\r\n    }\r\n\r\n    const showInfoModal = async (Obj) => {\r\n        handleClickOpen2();\r\n        let link = \"\"\r\n        if ((currentTab == 0 && Obj.media_type == 'tv') || currentTab == 2) {\r\n            link = `https://api.themoviedb.org/3/tv/${Obj.id}?api_key=${process.env.REACT_APP_API_KEY}&append_to_response=videos,credits,watch/providers,recommendations`\r\n            await setMediaType('tv')\r\n        } else {\r\n            link = `https://api.themoviedb.org/3/movie/${Obj.id}?api_key=${process.env.REACT_APP_API_KEY}&append_to_response=videos,credits,watch/providers,recommendations`\r\n            await setMediaType('movie')\r\n        }\r\n        let res = await axios.get(link)\r\n        let data = res.data\r\n        await setModalObj(data)\r\n        \r\n        if (data.videos.results.filter(e => e.type == \"Trailer\")[0]){\r\n            await setTrailer((data.videos.results.filter(e => e.type == \"Trailer\")[0]).key)\r\n        }\r\n        else{\r\n            setTrailer(null)\r\n        }\r\n        await setCast([...data.credits.cast])\r\n        let provider = data[\"watch/providers\"].results.IN\r\n        let newa = []\r\n        if (provider == null) {\r\n            newa = [null]\r\n        }\r\n        else if ('rent' in provider) {\r\n            newa = JSON.parse(JSON.stringify(provider['rent']))\r\n        }\r\n        else if ('flatrate' in provider) {\r\n            newa = JSON.parse(JSON.stringify(provider['flatrate']))\r\n        }\r\n        else if ('buy' in provider) {\r\n            newa = JSON.parse(JSON.stringify(provider['buy']))\r\n        }\r\n        else {\r\n            newa = [null]\r\n        }\r\n        await setWatchpro([...newa])\r\n        let recomm = data.recommendations.results.slice(0,6)\r\n        if (recomm.length != 0){\r\n            setRecommendation([...recomm])\r\n        }\r\n        \r\n    }\r\n\r\n    const openTrailer = () => {\r\n        let win = window.open(`https://www.youtube.com/watch?v=${trailer}`)\r\n        win.focus();\r\n    }\r\n\r\n    const handleFav = () =>{\r\n        let oldData = JSON.parse(localStorage.getItem('fav') || \"[]\")\r\n        if (favorites.includes(modalObj.id)) {\r\n            oldData = oldData.filter((m) => m.id != modalObj.id)\r\n        } else {\r\n            oldData.push({...modalObj,media_type:mediaType,trailer:trailer})\r\n        }\r\n        localStorage.setItem('fav', JSON.stringify(oldData));\r\n        // console.log(oldData)\r\n        handleFavouriteState();\r\n    }\r\n\r\n    const handleFavouriteState = ()=>{\r\n        let oldData = JSON.parse(localStorage.getItem('fav') || \"[]\")\r\n        let temp = oldData.map((m) => m.id)\r\n        setFavorites([...temp])\r\n    }\r\n\r\n    const swipeHandlers = useSwipeable({\r\n        onSwipedLeft: () => {\r\n            let nextTab = currentTab == 2 ? 0 : currentTab + 1\r\n            setCurrentTab(nextTab);\r\n            setCurrPage(1)\r\n        },\r\n        onSwipedRight: () => {\r\n            let prevTab = currentTab == 0 ? 2 : currentTab - 1\r\n            setCurrentTab(prevTab);\r\n            setCurrPage(1)\r\n        },\r\n        delta: 10,                            // min distance(px) before a swipe starts. *See Notes*\r\n        preventDefaultTouchmoveEvent: false,  // call e.preventDefault *See Details*\r\n        trackTouch: true,                     // track touch input\r\n        trackMouse: false,                    // track mouse input\r\n        rotationAngle: 0\r\n    });\r\n\r\n    return (\r\n        <div ref={myRef}>\r\n            <Tabs\r\n                value={currentTab}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                style={{ paddingBottom: 5 }}\r\n                onChange={(event, newValue) => {\r\n                    setCurrentTab(newValue)\r\n                    setCurrPage(1);\r\n                }}\r\n                variant=\"fullWidth\"\r\n            >\r\n                <Tab icon={<img className=\"tabIcons\" src={TrendingIcon} alt=\"\" />} iconPosition=\"start\" label=\"Trending\" />\r\n                <Tab icon={<img className=\"tabIcons\" src={CameraIcon} alt=\"\" />} iconPosition=\"start\" label=\"Popular Movies\" />\r\n                <Tab icon={<img className=\"tabIcons\" src={TvshowIcon} alt=\"\" />} iconPosition=\"start\" label=\"Popular TV Series\" />\r\n            </Tabs>\r\n            <div style={{ display: 'flex', justifyContent: 'right', marginRight: '2rem', marginTop: '0.5rem' }}>\r\n                <Button variant=\"contained\" startIcon={<SortIcon />} onClick={handleClickOpen3} style={currentTab == 0 ? { display: 'none' } : {}}>Sort By : {sortOrder[currentSort]}</Button>\r\n                <Dialog\r\n                    open={open3}\r\n                    maxWidth={\"md\"}\r\n                    TransitionComponent={Transition}\r\n                    scroll={\"paper\"}\r\n                    onClose={handleClose3}\r\n                    aria-describedby=\"alert-dialog-slide-description\"\r\n                >\r\n                    <DialogTitle style={{ margin: '2%', padding: '0px 9px' }}>\r\n                        <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n                            <Typography variant=\"div\">Sort Order</Typography>\r\n                            <CloseIcon onClick={handleClose3} style={{ cursor: 'pointer' }} />\r\n                        </Grid>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-slide-description\">\r\n                            <RadioGroup value={tempSort}>\r\n                                <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 2 }} direction=\"row\" alignItems=\"center\">\r\n                                    {\r\n                                        sortOrder.map((key, index) => (\r\n                                            <Grid item xs={6} md={4} key={index} >\r\n                                                <FormControlLabel value={index} control={<BpRadio onClick={(e) => setTempSort(e.target.value)} />} label={key} />\r\n                                            </Grid>\r\n                                        )) \r\n                                    }\r\n                                </Grid>\r\n                            </RadioGroup>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button variant=\"contained\" onClick={() => {  handleClose(); }}>Cancel</Button>\r\n                        <Button variant=\"contained\" onClick={handleSorting}>Apply Filter</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n                <Button variant=\"contained\" startIcon={<FilterListIcon />} onClick={handleClickOpen} style={currentTab == 0 ? { display: 'none' } : {marginLeft:'1rem'}}>Filter</Button>\r\n                <Dialog\r\n                    open={open}\r\n                    maxWidth={\"lg\"}\r\n                    TransitionComponent={Transition}\r\n                    scroll={\"paper\"}\r\n                    onClose={handleClose}\r\n                    aria-describedby=\"alert-dialog-slide-description\"\r\n                >\r\n                    <DialogTitle style={{ margin: '2%', padding: '0px 9px' }}>\r\n                        <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n                            <Typography variant=\"div\">Filter By Genre</Typography>\r\n                            <CloseIcon onClick={handleClose} style={{ cursor: 'pointer' }} />\r\n                        </Grid>\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText id=\"alert-dialog-slide-description\">\r\n\r\n                            <div style={{ display: 'flex', justifyContent: 'left', marginTop: '0.5rem', marginBottom: '0.5rem' }}>\r\n                                <Button variant=\"contained\" startIcon={<CheckBoxOutlineBlankIcon />} onClick={handleClearAll}>Clear All</Button></div>\r\n\r\n                            <FormGroup>\r\n                                <Grid container rowSpacing={1} columnSpacing={{ xs: 1, sm: 2, md: 3 }} direction=\"row\" alignItems=\"center\">\r\n                                    {\r\n                                        currentTab == 2 ? Object.keys(genreTvIds).map((key, index) => (\r\n                                            <Grid item xs={6} md={4} key={index} >\r\n                                                <FormControlLabel control={<Checkbox sx={{ '& .MuiSvgIcon-root': { fontSize: 28 } }} color=\"default\"\r\n                                                    checkedIcon={<BpCheckedIcon />} icon={<BpIcon />} name={key} onClick={(e) => handleAddDialog(e)} checked={dialogCheckBox.includes(key)} />} label={genreTvIds[key]} />\r\n                                            </Grid>\r\n                                        )) : Object.keys(genreMovIds).map((key, index) => (\r\n                                            <Grid item xs={6} md={4} key={index}>\r\n                                                <FormControlLabel control={<Checkbox sx={{ '& .MuiSvgIcon-root': { fontSize: 28 } }} color=\"default\"\r\n                                                    checkedIcon={<BpCheckedIcon />} icon={<BpIcon />} name={key} onClick={(e) => handleAddDialog(e)} checked={dialogCheckBox.includes(key)} />} label={genreMovIds[key]} />\r\n                                            </Grid>\r\n                                        ))\r\n                                    }\r\n                                </Grid>\r\n                            </FormGroup>\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button variant=\"contained\" onClick={() => { handleClearAll(); handleClose(); }}>Cancel</Button>\r\n                        <Button variant=\"contained\" onClick={handleFiltergenre}>Apply Filter</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n            {\r\n                movies == null ? <div style={{ width: '100%', textAlign: 'center' }}><CircularProgress /></div> :\r\n                    <div>\r\n                        <div className=\"show-movies\" {...swipeHandlers}>\r\n                            <ThemeProvider theme={theme}>\r\n                                {\r\n                                    movies.map((movieObj) => (\r\n                                        <StyledBadge badgeContent={movieObj.vote_average ? movieObj.vote_average : \"N/A\"} color={movieObj.vote_average ? movieObj.vote_average > 4.5 ? movieObj.vote_average > 7.4 ? \"success\" : \"warning\" : \"error\" : \"error\"} key={movieObj.id}>\r\n                                            <Card sx={matches ? { width: 250, margin: '0.7rem' } : { width: 165, margin: '0.4rem' }}  >\r\n                                                <CardActionArea onClick={() => showInfoModal(movieObj)} style={{ bottom: '0rem', right: '0rem' }}>\r\n                                                    <CardMedia\r\n                                                        height=\"80%\"\r\n                                                        width=\"100%\"\r\n                                                        component=\"img\"\r\n                                                        objectfit=\"fill\"\r\n                                                        image={movieObj.poster_path?`https://image.tmdb.org/t/p/original${movieObj.poster_path}`:posterna}\r\n                                                    />\r\n                                                    {movieObj.poster_path?<></>:<Typography variant='h5' className='movies-title' component=\"div\">\r\n                                                        {currentTab == 0 ? movieObj.media_type == 'tv' ? `${movieObj.name}` : `${movieObj.title}` : currentTab == 1 ? movieObj.title : movieObj.name}\r\n                                                    </Typography>}\r\n\r\n                                                </CardActionArea>\r\n                                            </Card>\r\n                                        </StyledBadge>\r\n                                    ))\r\n                                }\r\n                            </ThemeProvider>\r\n                            <Dialog\r\n                                open={open2}\r\n                                maxWidth={\"lg\"}\r\n                                TransitionComponent={Transition}\r\n                                scroll={\"paper\"}\r\n                                onClose={handleClose2}\r\n                            >\r\n                                <DialogTitle>  <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n                                    <Typography variant='h5' component=\"div\" sx={{ maxWidth: '80%' }}>\r\n                                        {modalObj != null ? mediaType == 'tv' ? `${modalObj.name}` : `${modalObj.title}` : \"Loading...\"}\r\n                                    </Typography>\r\n                                    <CloseIcon onClick={handleClose2} style={{ cursor: 'pointer' }} />\r\n                                </Grid>\r\n                                </DialogTitle>\r\n                                <DialogContent>\r\n                                    {modalObj != null ?\r\n                                        <div>\r\n                                            <table className=\"table table-hover table-bordered\" >\r\n                                                <tbody className='align-middle'>\r\n                                                    <tr >\r\n                                                        <th >Title: </th>\r\n                                                        <td >{mediaType == 'tv' ? `${modalObj.name}` : `${modalObj.title}`}</td>\r\n                                                        <td rowSpan='2' style={{ width: '33%' }} ><img src={`https://image.tmdb.org/t/p/original${modalObj.backdrop_path}`} className='modal-cover-image' alt={modalObj.title} /></td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <th >Media Type: </th>\r\n                                                        <td >{mediaType == 'tv' ? \"TV Show\" : \"Movie\"}</td>\r\n\r\n                                                    </tr>\r\n\r\n                                                    <tr >\r\n                                                        <th >Genre: </th>\r\n                                                        <td colSpan='2'>{[...modalObj.genres.map(e => e.name)].join(\",\")}\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr >\r\n                                                        <th >Overview: </th>\r\n                                                        <td colSpan='2' >{modalObj.overview}</td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <th>\r\n                                                            Rating:\r\n                                                        </th>\r\n                                                        <td colSpan='3' style={{ display: 'flex' }}> <ReactStars\r\n                                                            count={5}\r\n                                                            size={20}\r\n                                                            edit={false}\r\n                                                            value={Math.round(modalObj.vote_average) / 2}\r\n                                                            isHalf={true}\r\n                                                            activeColor=\"#ffd700\"\r\n                                                            style={{display:'flex'}}\r\n                                                        /> <div style={{ marginLeft: '0.4rem', marginTop: '0.2rem' }}>{modalObj.vote_average}</div> </td>\r\n                                                    </tr>\r\n                                                    <tr >\r\n                                                        <th >Language: </th>\r\n                                                        <td colSpan='2'>{(modalObj.original_language).toUpperCase()}</td>\r\n                                                    </tr>\r\n                                                    <tr >\r\n                                                        <th >{mediaType == 'tv' ? \"First Air Date: \" : \"Release Date: \"}</th>\r\n                                                        <td colSpan='2'>{new Date(mediaType == 'tv' ? modalObj.first_air_date : modalObj.release_date).toLocaleDateString(\"en-IN\", { year: 'numeric', month: 'long', day: 'numeric' })}</td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <th>Watch Providers: </th>\r\n                                                        <td colSpan='2' style={{display:'flex'}}>{watchpro[0] == null ? \"Currently Not Available To Stream In India\" : watchpro.map((obj, index) => (<div key={index} style={{display:'flex',justifyContent:'center',alignItems:'center'}}>\r\n                                                            <img src={`https://image.tmdb.org/t/p/w45${obj.logo_path}`} alt={obj.provider_name} title={obj.provider_name} style={{ marginLeft: '0.3rem', marginRight: '0.3rem' }} />\r\n                                                            <small>{obj.provider_name}</small>\r\n                                                        </div>\r\n                                                        ))}</td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            </table>\r\n                                            {cast.length!=0? <div>\r\n                                                \r\n                                            <Typography variant='h5' sx={{paddingBottom:'0.5rem'}}>\r\n                                                Cast:\r\n                                            </Typography>\r\n                                            <Carousel\r\n                                                swipeable={true}\r\n                                                draggable={true}\r\n                                                showDots={false}\r\n                                                responsive={responsive}\r\n                                                ssr={false} // means to render carousel on server-side.\r\n                                                infinite={false}\r\n                                                autoPlay={false}\r\n                                                autoPlaySpeed={9000000}\r\n                                                keyBoardControl={true}\r\n                                                customTransition=\" ease 930ms\"\r\n                                                transitionDuration={930}\r\n                                                containerClass=\"carousel-container\"\r\n                                                removeArrowOnDeviceType={[]}\r\n                                                dotListClass=\"custom-dot-list-style\"\r\n                                                itemClass=\"carousel-item-padding-40-px\"\r\n                                                style={{alignItems:'stretch',display:'flex'}}\r\n    \r\n                                            >\r\n                                            \r\n                                                \r\n                                                {\r\n                                                    cast.map((obj) => (\r\n                                                        \r\n                                                        <Card sx={{ height: 320,width:'9rem' }} key={obj.order} style={{marginRight:'0.5rem'}}>\r\n                                                            <CardMedia\r\n                                                                component=\"img\"\r\n                                                                alt=\"\"\r\n                                                                sx={{height:'9rem',width:'9rem'}}\r\n\r\n                                                                image={obj.profile_path == null ? default_dp : `https://image.tmdb.org/t/p/w154/${obj.profile_path}`}\r\n                                                            />\r\n                                                            <CardContent>\r\n                                                                <Typography variant=\"h6\" component=\"div\" >\r\n                                                                    {obj.name}\r\n                                                                </Typography>\r\n                                                                <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                                                    {obj.character}\r\n                                                                </Typography>\r\n                                                            </CardContent>\r\n\r\n                                                        </Card>\r\n                                                        \r\n                                                       \r\n\r\n                                                    ))\r\n                                                }\r\n\r\n                                           \r\n                                            </Carousel></div>:<div></div>}\r\n                                            { recommendation.length!=0?\r\n                                            <div>\r\n                                            <Typography variant='h5' sx={{paddingBottom:'0.5rem',paddingTop:\"0.7rem\"}}>\r\n                                                Recommendations:\r\n                                            </Typography>\r\n                                            <Carousel\r\n                                                swipeable={true}\r\n                                                draggable={true}\r\n                                                showDots={false}\r\n                                                responsive={responsive}\r\n                                                ssr={false} // means to render carousel on server-side.\r\n                                                infinite={false}\r\n                                                autoPlay={false}\r\n                                                autoPlaySpeed={9000000}\r\n                                                keyBoardControl={true}\r\n                                                customTransition=\" ease 930ms\"\r\n                                                transitionDuration={930}\r\n                                                containerClass=\"carousel-container\"\r\n                                                removeArrowOnDeviceType={[]}\r\n                                                dotListClass=\"custom-dot-list-style\"\r\n                                                itemClass=\"carousel-item-padding-40-px\"\r\n                                                style={{alignItems:'stretch',display:'flex'}}\r\n    \r\n                                            >\r\n                                            \r\n                                                \r\n                                                {\r\n                                                    recommendation.map((obj,index) => (\r\n                                                        <Card sx={{ height: 320,marginBottom:'1rem',width:'9rem' }} key={index} style={{marginRight:'0.5rem'}}>\r\n                                                            <CardMedia\r\n                                                                component=\"img\"\r\n                                                                alt=\"\"\r\n                                                                sx={{height:'9rem',width:'9rem'}}\r\n\r\n                                                                image={obj.poster_path == null ? posterna : `https://image.tmdb.org/t/p/w154/${obj.poster_path}`}\r\n                                                            />\r\n                                                            <CardContent>\r\n                                                                <Typography variant=\"h6\" component=\"div\" align='left'>\r\n                                                                    {obj.media_type=='movie'?obj.title:obj.name}\r\n                                                                </Typography>\r\n                                                            </CardContent>\r\n                                                        </Card>\r\n                                                    ))\r\n                                                }\r\n\r\n                                           \r\n                                            </Carousel>\r\n                                            </div>\r\n                                            :<div></div>}\r\n\r\n                                        </div> : <CircularProgress />\r\n                                    }\r\n                                </DialogContent>\r\n                                <DialogActions sx={{ paddingTop: '1rem' }}>\r\n                                    <Button variant='contained' color=\"error\" startIcon={<YouTubeIcon />} disabled={trailer == null} onClick={openTrailer} sx={matches?{ marginRight: '2rem' }:{}}>{trailer != null ? \"Watch Trailer\" : \"No Trailer Available\"}</Button>\r\n                                    <Button variant='contained' color=\"primary\" startIcon={modalObj!=null?(favorites.includes(modalObj.id)) ?<FavoriteIcon />:<FavoriteBorderIcon/>:<></>}  onClick={handleFav} sx={matches?{ marginRight: '2rem' }:{}}>{modalObj!=null?(favorites.includes(modalObj.id)) ? \"Remove from Watch List\" : \"Add To My Watch List\":\"\"}</Button>\r\n                                </DialogActions>\r\n                            </Dialog>\r\n                        </div>\r\n                        <Pagination count={totalPages} page={currPage} size=\"large\" showFirstButton showLastButton shape=\"rounded\" sx={{ justifyContent: \"center\", display: 'flex', marginBottom: '1rem' }}\r\n                            onChange={(event, value) => setCurrPage(value)} color=\"primary\" />\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n} \r\n","C:\\web development\\movies-watchlist\\Functional Components\\src\\Components\\About.js",[],[],"C:\\web development\\movies-watchlist\\Functional Components\\src\\Components\\Search.js",["100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120"],[],"import { Button, IconButton, InputAdornment, TextField, CardActionArea } from '@mui/material'\r\nimport React, { useEffect, useState } from 'react'\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport axios from 'axios';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Card from '@mui/material/Card';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport { styled } from '@mui/material/styles';\r\nimport Badge from '@mui/material/Badge';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport useMediaQuery from '@mui/material/useMediaQuery';\r\nimport { CardContent } from '@mui/material';\r\nimport Typography from '@mui/material/Typography';\r\nimport searchnotfoundimg from '../Icons/searchnotfound.jpg'\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport ReactStars from \"react-rating-stars-component\";\r\nimport YouTubeIcon from '@mui/icons-material/YouTube';\r\nimport Carousel from 'react-multi-carousel';\r\nimport 'react-multi-carousel/lib/styles.css';\r\nimport default_dp from '../Icons/default_dp.jpg'\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Slide from '@mui/material/Slide';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport posterna from '../Icons/posterna.jpg'\r\nimport Alert from '@mui/material/Alert';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\n\r\nconst StyledBadge = styled(Badge)({\r\n  \"& .MuiBadge-badge\": {\r\n    color: \"white\",\r\n    padding: \"0.4rem\",\r\n    fontSize: \"0.9rem\",\r\n    top: '1.2rem',\r\n    right: '1.5rem',\r\n    textShadow: \"\\\r\n    0.05em 0 black,\\\r\n    0 0.05em black,\\\r\n    -0.05em 0 black,\\\r\n    0 -0.05em black,\\\r\n    -0.05em -0.05em black,\\\r\n    -0.05em 0.05em black,\\\r\n    0.05em -0.05em black,\\\r\n    0.05em 0.05em black\"\r\n\r\n  }\r\n});\r\n\r\nexport default function Search() {\r\n  const theme = createTheme();\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [finalquery, setFinalQuery] = useState(\"\");\r\n  const [results, setResults] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [currPage, setCurrPage] = useState(1);\r\n  const [totalPages, setTotalPages] = useState(0);\r\n  const [totalResult, setTotalResult] = useState(0);\r\n  const [searchDone, setSearchDone] = useState(false)\r\n  const [open2, setOpen2] = React.useState(false);\r\n  const [modalObj, setModalObj] = useState(null);\r\n  const [mediaType, setMediaType] = useState(null);\r\n  const [trailer, setTrailer] = useState(null);\r\n  const [cast, setCast] = useState([]);\r\n  const [watchpro, setWatchpro] = useState([]);\r\n  const [error, setError] = useState(false)\r\n  const [recommendation, setRecommendation] = useState([]);\r\n  const [favorites, setFavorites] = useState([])\r\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\r\n\r\n  const responsive = {\r\n    superLargeDesktop: {\r\n      // the naming can be any, depends on you.\r\n      breakpoint: { max: 4000, min: 3000 },\r\n      items: 7,\r\n      slidesToSlide: 6\r\n    },\r\n    desktop: {\r\n      breakpoint: { max: 3000, min: 900 },\r\n      items: 5,\r\n      slidesToSlide: 4\r\n    },\r\n    tablet: {\r\n      breakpoint: { max: 900, min: 580 },\r\n      items: 3,\r\n      slidesToSlide: 2\r\n    },\r\n    mobile: {\r\n      breakpoint: { max: 580, min: 0 },\r\n      items: 2,\r\n      slidesToSlide: 2\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    let fav = JSON.parse(localStorage.getItem('fav') || \"[]\")\r\n    fav = fav.map((m) => m.id)\r\n    setFavorites([...fav])\r\n  }, [])\r\n\r\n  const handleFav = () =>{\r\n    let oldData = JSON.parse(localStorage.getItem('fav') || \"[]\")\r\n    if (favorites.includes(modalObj.id)) {\r\n        oldData = oldData.filter((m) => m.id != modalObj.id)\r\n    } else {\r\n        oldData.push({...modalObj,media_type:mediaType,trailer:trailer})\r\n    }\r\n    localStorage.setItem('fav', JSON.stringify(oldData));\r\n    // console.log(oldData)\r\n    handleFavouriteState();\r\n}\r\n\r\nconst handleFavouriteState = ()=>{\r\n    let oldData = JSON.parse(localStorage.getItem('fav') || \"[]\")\r\n    let temp = oldData.map((m) => m.id)\r\n    setFavorites([...temp])\r\n}\r\n\r\n\r\n  const getmovies = async () => {\r\n    if (searchQuery == \"\") {\r\n      setError(true)\r\n      setTimeout(() => {\r\n        setError(false)\r\n      }, 2500)\r\n    } else {\r\n      await setLoading(true)\r\n      let res = await axios.get(`https://api.themoviedb.org/3/search/multi?api_key=${process.env.REACT_APP_API_KEY}&language=en-US&query=${searchQuery}&page=${currPage}`)\r\n      let data = res.data\r\n      await setTotalPages(data.total_pages)\r\n      await setFinalQuery(searchQuery)\r\n      let result = data.results\r\n      await setTotalResult(data.total_results)\r\n      await setResults([...result])\r\n      await setLoading(false)\r\n      setSearchDone(true)\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (finalquery != \"\") {\r\n      getmovies();\r\n    }\r\n  }, [currPage])\r\n\r\n  const cleanup = () => {\r\n    setLoading(false)\r\n    setResults([])\r\n    setSearchQuery(\"\")\r\n    setFinalQuery(\"\")\r\n    setSearchDone(false)\r\n    setTotalPages(0)\r\n  }\r\n\r\n  const handleKeypress = (e) => {\r\n    //it triggers by pressing the enter key\r\n    if (e.key === 'Enter') {\r\n      getmovies();\r\n    }\r\n  }\r\n  const handleClickOpen2 = () => {\r\n    setOpen2(true);\r\n  };\r\n\r\n  const handleClose2 = () => {\r\n    setOpen2(false);\r\n    setModalObj(null)\r\n    setTrailer(null)\r\n    setMediaType(null)\r\n    setCast([])\r\n    setWatchpro([])\r\n    setRecommendation([])\r\n  };\r\n\r\n  const showInfoModal = async (Obj) => {\r\n    handleClickOpen2();\r\n    let link = \"\"\r\n    if (Obj.media_type == 'tv') {\r\n      link = `https://api.themoviedb.org/3/tv/${Obj.id}?api_key=${process.env.REACT_APP_API_KEY}&append_to_response=videos,credits,watch/providers,recommendations`\r\n      await setMediaType('tv')\r\n    } else {\r\n      link = `https://api.themoviedb.org/3/movie/${Obj.id}?api_key=${process.env.REACT_APP_API_KEY}&append_to_response=videos,credits,watch/providers,recommendations`\r\n      await setMediaType('movie')\r\n    }\r\n    let res = await axios.get(link)\r\n    let data = res.data\r\n    await setModalObj(data)\r\n    if (data.videos.results.filter(e => e.type == \"Trailer\")[0]) {\r\n      await setTrailer((data.videos.results.filter(e => e.type == \"Trailer\")[0]).key)\r\n    }\r\n    else {\r\n      setTrailer(null)\r\n    }\r\n    await setCast([...data.credits.cast])\r\n    let provider = data[\"watch/providers\"].results.IN\r\n    let newa = []\r\n    if (provider == null) {\r\n      newa = [null]\r\n    }\r\n    else if ('rent' in provider) {\r\n      newa = JSON.parse(JSON.stringify(provider['rent']))\r\n    }\r\n    else if ('flatrate' in provider) {\r\n      newa = JSON.parse(JSON.stringify(provider['flatrate']))\r\n    }\r\n    else if ('buy' in provider) {\r\n      newa = JSON.parse(JSON.stringify(provider['buy']))\r\n    }\r\n    else {\r\n      newa = [null]\r\n    }\r\n    await setWatchpro([...newa])\r\n    let recomm = data.recommendations.results.slice(0, 6)\r\n    if (recomm.length != 0) {\r\n      setRecommendation([...recomm])\r\n    }\r\n  }\r\n\r\n  const openTrailer = () => {\r\n    let win = window.open(`https://www.youtube.com/watch?v=${trailer}`)\r\n    win.focus();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      <div style={{ display: 'flex' }}>\r\n        <TextField label=\"Search\"\r\n          placeholder=\"Type your query here\"\r\n          type=\"text\"\r\n          sx={{ width: '100%', margin: '1.2rem' }}\r\n          variant=\"outlined\"\r\n          margin=\"normal\"\r\n          onChange={(e) => setSearchQuery(e.target.value)}\r\n          value={searchQuery}\r\n          onKeyPress={handleKeypress}\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <SearchIcon />\r\n              </InputAdornment>\r\n            ),\r\n            endAdornment: searchQuery && (\r\n              <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={cleanup}\r\n              ><CancelIcon /></IconButton>\r\n            )\r\n          }}\r\n        />\r\n\r\n        <Button\r\n          variant=\"contained\"\r\n          size={\"large\"}\r\n          style={{ margin: \"1.2rem\", width: '8rem', height: '3.4rem' }}\r\n          onClick={getmovies}\r\n        >\r\n          <SearchIcon fontSize=\"large\" />\r\n        </Button>\r\n      </div>\r\n      {error && <Alert severity=\"error\" sx={{ marginLeft: '1.5rem', marginRight: '1.5rem' }}>Oops! It looks like you asked for a blank movie. I dont think we have those. Type something in the search box and lets try again</Alert>}\r\n      {\r\n        loading ? <div style={{ width: '100%', textAlign: 'center' }}><CircularProgress /></div> :\r\n          results.length == 0 && searchDone ? <div style={{ display: 'flex', flexDirection: 'column', width: '100%', height: '60%', justifyContent: 'center', alignItems: 'center' }}>\r\n            <img src={searchnotfoundimg} alt=\"No results Found Image\" style={{ width: '50%', height: '50%' }} />\r\n            <Typography sx={{ margin: '1rem' }} variant=\"h5\">No Results were found for {finalquery}</Typography>\r\n\r\n          </div> :\r\n\r\n            <div>\r\n              <ThemeProvider theme={theme} >\r\n                {results.length != 0 ? <Typography gutterBottom={true} sx={{ marginLeft: '1rem' }} variant={'h5'}>Found {totalResult} Results For {finalquery}  </Typography> : <></>}\r\n                <div >\r\n\r\n                {\r\n                  results.map((movieObj) => (\r\n                    <StyledBadge sx={matches?{}:{left:'1rem'}} badgeContent={movieObj.vote_average ? movieObj.vote_average : \"N/A\"} color={movieObj.vote_average ? movieObj.vote_average > 4 ? movieObj.vote_average > 8 ? \"success\" : \"warning\" : \"error\" : \"error\"} key={movieObj.id}>\r\n                      <Card sx={matches ? { width: 250, margin: '0.7rem' } : { width: 165,margin:'0.4rem'}}  >\r\n                        <CardActionArea style={{ bottom: '0rem', right: '0rem' }} onClick={() => showInfoModal(movieObj)}>\r\n                          <CardMedia\r\n                            height=\"80%\"\r\n                            width=\"100%\"\r\n                            component=\"img\"\r\n                            objectfit=\"fill\"\r\n                            image={movieObj.poster_path ? `https://image.tmdb.org/t/p/original${movieObj.poster_path}` : posterna}\r\n                          />\r\n                          <CardContent>\r\n                            <Typography variant=\"h6\" component=\"div\" >\r\n                              {movieObj.media_type == 'tv' ? movieObj.name : movieObj.title}\r\n                            </Typography>\r\n                          </CardContent>\r\n                        </CardActionArea>\r\n                      </Card>\r\n                    </StyledBadge>\r\n                  ))\r\n                }\r\n                </div>\r\n              </ThemeProvider>\r\n              <Dialog\r\n                open={open2}\r\n                maxWidth={\"lg\"}\r\n                TransitionComponent={Transition}\r\n                scroll={\"paper\"}\r\n                onClose={handleClose2}\r\n              >\r\n                <DialogTitle>  <Grid container justifyContent=\"space-between\" alignItems=\"center\">\r\n                  <Typography variant='h5' component=\"div\" sx={{ maxWidth: '80%' }}>\r\n                    {modalObj != null ? mediaType == 'tv' ? `${modalObj.name}` : `${modalObj.title}` : \"Loading...\"}\r\n                  </Typography>\r\n                  <CloseIcon onClick={handleClose2} style={{ cursor: 'pointer' }} />\r\n                </Grid>\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                  {modalObj != null ?\r\n                    <div>\r\n                      <table className=\"table table-hover table-bordered\" >\r\n                        <tbody className='align-middle'>\r\n                          <tr >\r\n                            <th >Title: </th>\r\n                            <td >{mediaType == 'tv' ? `${modalObj.name}` : `${modalObj.title}`}</td>\r\n                            <td rowSpan='2' style={{ width: '33%' }} ><img src={`https://image.tmdb.org/t/p/original${modalObj.backdrop_path}`} className='modal-cover-image' alt={modalObj.title} /></td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th >Media Type: </th>\r\n                            <td >{mediaType == 'tv' ? \"TV Show\" : \"Movie\"}</td>\r\n\r\n                          </tr>\r\n\r\n                          <tr >\r\n                            <th >Genre: </th>\r\n                            <td colSpan='2'>{[...modalObj.genres.map(e => e.name)].join(\",\")}\r\n                            </td>\r\n                          </tr>\r\n                          <tr >\r\n                            <th >Overview: </th>\r\n                            <td colSpan='2' >{modalObj.overview}</td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>\r\n                              Rating:\r\n                            </th>\r\n                            <td colSpan='3' style={{ display: 'flex' }}> <ReactStars\r\n                              count={5}\r\n                              size={20}\r\n                              edit={false}\r\n                              value={Math.round(modalObj.vote_average) / 2}\r\n                              isHalf={true}\r\n                              activeColor=\"#ffd700\"\r\n                            /> <div style={{ marginLeft: '0.4rem', marginTop: '0.2rem' }}>{modalObj.vote_average}</div> </td>\r\n                          </tr>\r\n                          <tr >\r\n                            <th >Language: </th>\r\n                            <td colSpan='2'>{(modalObj.original_language).toUpperCase()}</td>\r\n                          </tr>\r\n                          <tr >\r\n                            <th >{mediaType == 'tv' ? \"First Air Date: \" : \"Release Date: \"}</th>\r\n                            <td colSpan='2'>{new Date(mediaType == 'tv' ? modalObj.first_air_date : modalObj.release_date).toLocaleDateString(\"en-IN\", { year: 'numeric', month: 'long', day: 'numeric' })}</td>\r\n                          </tr>\r\n                          <tr>\r\n                            <th>Watch Providers: </th>\r\n                            <td colSpan='2' style={{ display: 'flex', flexWrap: 'wrap', width: '100%' }}>{watchpro[0] == null ? \"Currently Not Available To Stream In India\" : watchpro.map((obj, index) => (<div key={index}>\r\n                              <img src={`https://image.tmdb.org/t/p/w45${obj.logo_path}`} alt={obj.provider_name} title={obj.provider_name} style={{ marginLeft: '0.3rem', marginRight: '0.3rem' }} />\r\n                              <small>{obj.provider_name}</small>\r\n                            </div>\r\n                            ))}</td>\r\n                          </tr>\r\n                        </tbody>\r\n                      </table>\r\n                      {cast.length != 0 ? <div>\r\n                        <Typography variant='h5' sx={{ paddingBottom: '0.5rem' }}>\r\n                          Cast:\r\n                        </Typography>\r\n                        <Carousel\r\n                          swipeable={true}\r\n                          draggable={true}\r\n                          showDots={false}\r\n                          responsive={responsive}\r\n                          ssr={false} // means to render carousel on server-side.\r\n                          infinite={false}\r\n                          autoPlay={false}\r\n                          autoPlaySpeed={9000000}\r\n                          keyBoardControl={true}\r\n                          customTransition=\" ease 930ms\"\r\n                          transitionDuration={930}\r\n                          containerClass=\"carousel-container\"\r\n                          removeArrowOnDeviceType={[]}\r\n                          dotListClass=\"custom-dot-list-style\"\r\n                          itemClass=\"carousel-item-padding-40-px\"\r\n                          style={{ alignItems: 'stretch', display: 'flex' }}\r\n                        >\r\n                          {\r\n                            cast.map((obj) => (\r\n\r\n                              <Card sx={{ height: 370 }} key={obj.order} style={{ marginRight: '0.5rem' }}>\r\n                                <CardMedia\r\n                                  component=\"img\"\r\n                                  alt=\"\"\r\n                                  sx={{ height: '14rem', width: '14rem' }}\r\n\r\n                                  image={obj.profile_path == null ? default_dp : `https://image.tmdb.org/t/p/w154/${obj.profile_path}`}\r\n                                />\r\n                                <CardContent>\r\n                                  <Typography variant=\"h6\" component=\"div\" >\r\n                                    {obj.name}\r\n                                  </Typography>\r\n                                  <Typography variant=\"caption\" color=\"text.secondary\">\r\n                                    {obj.character}\r\n                                  </Typography>\r\n                                </CardContent>\r\n                              </Card>\r\n                            ))\r\n                          }\r\n                        </Carousel></div> : <div></div>}\r\n                      {recommendation.length != 0 ?\r\n                        <div>\r\n                          <Typography variant='h5' sx={{ paddingBottom: '0.5rem', paddingTop: \"0.7rem\" }}>\r\n                            Recommendations:\r\n                          </Typography>\r\n                          <Carousel\r\n                            swipeable={true}\r\n                            draggable={true}\r\n                            showDots={false}\r\n                            responsive={responsive}\r\n                            ssr={false} // means to render carousel on server-side.\r\n                            infinite={false}\r\n                            autoPlay={false}\r\n                            autoPlaySpeed={9000000}\r\n                            keyBoardControl={true}\r\n                            customTransition=\" ease 930ms\"\r\n                            transitionDuration={930}\r\n                            containerClass=\"carousel-container\"\r\n                            removeArrowOnDeviceType={[]}\r\n                            dotListClass=\"custom-dot-list-style\"\r\n                            itemClass=\"carousel-item-padding-40-px\"\r\n                            style={{ alignItems: 'stretch', display: 'flex' }}\r\n                          >\r\n                            {\r\n                              recommendation.map((obj, index) => (\r\n                                <Card sx={{ height: 330, marginBottom: '1rem' }} key={index} style={{ marginRight: '0.5rem' }}>\r\n                                  <CardMedia\r\n                                    component=\"img\"\r\n                                    alt=\"\"\r\n                                    sx={{ height: '14rem', width: '14rem' }}\r\n\r\n                                    image={obj.poster_path == null ? posterna : `https://image.tmdb.org/t/p/w154/${obj.poster_path}`}\r\n                                  />\r\n                                  <CardContent>\r\n                                    <Typography variant=\"h6\" component=\"div\" align='left'>\r\n                                      {obj.media_type == 'movie' ? obj.title : obj.name}\r\n                                    </Typography>\r\n                                  </CardContent>\r\n                                </Card>\r\n                              ))\r\n                            }\r\n                          </Carousel>\r\n                        </div>\r\n                        : <div></div>}\r\n\r\n                    </div> : <CircularProgress />\r\n                  }\r\n                </DialogContent>\r\n                <DialogActions sx={{ paddingTop: '1rem' }}>\r\n                  <Button variant='contained' color=\"error\" startIcon={<YouTubeIcon />} disabled={trailer == null} onClick={openTrailer} sx={{ marginRight: '2rem' }}>{trailer != null ? \"Watch Trailer\" : \"No Trailer Available\"}</Button>\r\n                  <Button variant='contained' color=\"primary\" startIcon={modalObj != null ? (favorites.includes(modalObj.id)) ? <FavoriteIcon /> : <FavoriteBorderIcon /> : <></>} onClick={handleFav} sx={matches ? { marginRight: '2rem' } : {}}>{modalObj != null ? (favorites.includes(modalObj.id)) ? \"Remove from Watch List\" : \"Add To My Watchlist\" : \"\"}</Button>\r\n                </DialogActions>\r\n              </Dialog>\r\n            </div>\r\n      }\r\n\r\n      {\r\n        totalPages > 1 ? <Pagination count={totalPages} page={currPage} size=\"large\" showFirstButton showLastButton shape=\"rounded\" sx={{ justifyContent: \"center\", display: 'flex', marginBottom: '1rem' }}\r\n          onChange={(event, value) => setCurrPage(value)} color=\"primary\" /> : <></>\r\n      }\r\n    </div>\r\n  )\r\n}",{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":18,"column":15,"nodeType":"127","messageId":"128","endLine":18,"endColumn":18},{"ruleId":"129","severity":1,"message":"130","line":27,"column":19,"nodeType":"131","messageId":"132","endLine":27,"endColumn":21},{"ruleId":"129","severity":1,"message":"130","line":34,"column":34,"nodeType":"131","messageId":"132","endLine":34,"endColumn":36},{"ruleId":"129","severity":1,"message":"130","line":38,"column":34,"nodeType":"131","messageId":"132","endLine":38,"endColumn":36},{"ruleId":"129","severity":1,"message":"130","line":56,"column":76,"nodeType":"131","messageId":"132","endLine":56,"endColumn":78},{"ruleId":"125","severity":1,"message":"133","line":5,"column":49,"nodeType":"127","messageId":"128","endLine":5,"endColumn":63},{"ruleId":"129","severity":1,"message":"134","line":126,"column":63,"nodeType":"131","messageId":"132","endLine":126,"endColumn":65},{"ruleId":"129","severity":1,"message":"134","line":148,"column":28,"nodeType":"131","messageId":"132","endLine":148,"endColumn":30},{"ruleId":"129","severity":1,"message":"130","line":189,"column":15,"nodeType":"131","messageId":"132","endLine":189,"endColumn":17},{"ruleId":"129","severity":1,"message":"130","line":194,"column":21,"nodeType":"131","messageId":"132","endLine":194,"endColumn":23},{"ruleId":"135","severity":1,"message":"136","line":203,"column":6,"nodeType":"137","endLine":203,"endColumn":53,"suggestions":"138"},{"ruleId":"129","severity":1,"message":"134","line":206,"column":21,"nodeType":"131","messageId":"132","endLine":206,"endColumn":23},{"ruleId":"129","severity":1,"message":"130","line":209,"column":33,"nodeType":"131","messageId":"132","endLine":209,"endColumn":35},{"ruleId":"139","severity":1,"message":"140","line":213,"column":15,"nodeType":"127","messageId":"141","endLine":213,"endColumn":20},{"ruleId":"135","severity":1,"message":"142","line":223,"column":6,"nodeType":"137","endLine":223,"endColumn":19,"suggestions":"143"},{"ruleId":"129","severity":1,"message":"134","line":226,"column":57,"nodeType":"131","messageId":"132","endLine":226,"endColumn":59},{"ruleId":"144","severity":1,"message":"145","line":351,"column":28,"nodeType":"146","endLine":351,"endColumn":190},{"ruleId":"129","severity":1,"message":"130","line":352,"column":48,"nodeType":"131","messageId":"132","endLine":352,"endColumn":50},{"ruleId":"125","severity":1,"message":"147","line":14,"column":47,"nodeType":"127","messageId":"128","endLine":14,"endColumn":62},{"ruleId":"148","severity":1,"message":"149","line":166,"column":21,"nodeType":"150","messageId":"151","endLine":174,"endColumn":27},{"ruleId":"129","severity":1,"message":"130","line":270,"column":28,"nodeType":"131","messageId":"132","endLine":270,"endColumn":30},{"ruleId":"129","severity":1,"message":"130","line":273,"column":33,"nodeType":"131","messageId":"132","endLine":273,"endColumn":35},{"ruleId":"129","severity":1,"message":"134","line":305,"column":69,"nodeType":"131","messageId":"132","endLine":305,"endColumn":71},{"ruleId":"129","severity":1,"message":"130","line":330,"column":25,"nodeType":"131","messageId":"132","endLine":330,"endColumn":27},{"ruleId":"129","severity":1,"message":"130","line":330,"column":48,"nodeType":"131","messageId":"132","endLine":330,"endColumn":50},{"ruleId":"129","severity":1,"message":"130","line":330,"column":71,"nodeType":"131","messageId":"132","endLine":330,"endColumn":73},{"ruleId":"129","severity":1,"message":"130","line":341,"column":52,"nodeType":"131","messageId":"132","endLine":341,"endColumn":54},{"ruleId":"129","severity":1,"message":"130","line":342,"column":70,"nodeType":"131","messageId":"132","endLine":342,"endColumn":72},{"ruleId":"129","severity":1,"message":"134","line":367,"column":27,"nodeType":"131","messageId":"132","endLine":367,"endColumn":29},{"ruleId":"129","severity":1,"message":"134","line":381,"column":50,"nodeType":"131","messageId":"132","endLine":381,"endColumn":52},{"ruleId":"129","severity":1,"message":"130","line":398,"column":38,"nodeType":"131","messageId":"132","endLine":398,"endColumn":40},{"ruleId":"129","severity":1,"message":"130","line":403,"column":38,"nodeType":"131","messageId":"132","endLine":403,"endColumn":40},{"ruleId":"129","severity":1,"message":"130","line":432,"column":115,"nodeType":"131","messageId":"132","endLine":432,"endColumn":117},{"ruleId":"129","severity":1,"message":"130","line":467,"column":120,"nodeType":"131","messageId":"132","endLine":467,"endColumn":122},{"ruleId":"129","severity":1,"message":"130","line":491,"column":52,"nodeType":"131","messageId":"132","endLine":491,"endColumn":54},{"ruleId":"129","severity":1,"message":"130","line":531,"column":69,"nodeType":"131","messageId":"132","endLine":531,"endColumn":71},{"ruleId":"129","severity":1,"message":"130","line":531,"column":96,"nodeType":"131","messageId":"132","endLine":531,"endColumn":98},{"ruleId":"129","severity":1,"message":"130","line":531,"column":160,"nodeType":"131","messageId":"132","endLine":531,"endColumn":162},{"ruleId":"129","severity":1,"message":"130","line":549,"column":71,"nodeType":"131","messageId":"132","endLine":549,"endColumn":73},{"ruleId":"129","severity":1,"message":"130","line":561,"column":73,"nodeType":"131","messageId":"132","endLine":561,"endColumn":75},{"ruleId":"129","severity":1,"message":"130","line":566,"column":73,"nodeType":"131","messageId":"132","endLine":566,"endColumn":75},{"ruleId":"129","severity":1,"message":"130","line":598,"column":73,"nodeType":"131","messageId":"132","endLine":598,"endColumn":75},{"ruleId":"129","severity":1,"message":"130","line":599,"column":93,"nodeType":"131","messageId":"132","endLine":599,"endColumn":95},{"ruleId":"129","severity":1,"message":"134","line":611,"column":57,"nodeType":"131","messageId":"132","endLine":611,"endColumn":59},{"ruleId":"129","severity":1,"message":"134","line":666,"column":68,"nodeType":"131","messageId":"132","endLine":666,"endColumn":70},{"ruleId":"129","severity":1,"message":"130","line":704,"column":84,"nodeType":"131","messageId":"132","endLine":704,"endColumn":86},{"ruleId":"148","severity":1,"message":"149","line":46,"column":17,"nodeType":"150","messageId":"151","endLine":54,"endColumn":25},{"ruleId":"129","severity":1,"message":"134","line":112,"column":46,"nodeType":"131","messageId":"132","endLine":112,"endColumn":48},{"ruleId":"129","severity":1,"message":"130","line":129,"column":21,"nodeType":"131","messageId":"132","endLine":129,"endColumn":23},{"ruleId":"129","severity":1,"message":"134","line":149,"column":20,"nodeType":"131","messageId":"132","endLine":149,"endColumn":22},{"ruleId":"135","severity":1,"message":"152","line":152,"column":6,"nodeType":"137","endLine":152,"endColumn":16,"suggestions":"153"},{"ruleId":"129","severity":1,"message":"130","line":186,"column":24,"nodeType":"131","messageId":"132","endLine":186,"endColumn":26},{"ruleId":"129","severity":1,"message":"130","line":196,"column":48,"nodeType":"131","messageId":"132","endLine":196,"endColumn":50},{"ruleId":"129","severity":1,"message":"130","line":197,"column":64,"nodeType":"131","messageId":"132","endLine":197,"endColumn":66},{"ruleId":"129","severity":1,"message":"134","line":222,"column":23,"nodeType":"131","messageId":"132","endLine":222,"endColumn":25},{"ruleId":"129","severity":1,"message":"130","line":272,"column":26,"nodeType":"131","messageId":"132","endLine":272,"endColumn":28},{"ruleId":"144","severity":1,"message":"145","line":273,"column":13,"nodeType":"146","endLine":273,"endColumn":113},{"ruleId":"129","severity":1,"message":"134","line":280,"column":33,"nodeType":"131","messageId":"132","endLine":280,"endColumn":35},{"ruleId":"129","severity":1,"message":"130","line":297,"column":52,"nodeType":"131","messageId":"132","endLine":297,"endColumn":54},{"ruleId":"129","severity":1,"message":"130","line":316,"column":51,"nodeType":"131","messageId":"132","endLine":316,"endColumn":53},{"ruleId":"129","severity":1,"message":"130","line":328,"column":45,"nodeType":"131","messageId":"132","endLine":328,"endColumn":47},{"ruleId":"129","severity":1,"message":"130","line":333,"column":45,"nodeType":"131","messageId":"132","endLine":333,"endColumn":47},{"ruleId":"129","severity":1,"message":"130","line":364,"column":45,"nodeType":"131","messageId":"132","endLine":364,"endColumn":47},{"ruleId":"129","severity":1,"message":"130","line":365,"column":65,"nodeType":"131","messageId":"132","endLine":365,"endColumn":67},{"ruleId":"129","severity":1,"message":"134","line":377,"column":36,"nodeType":"131","messageId":"132","endLine":377,"endColumn":38},{"ruleId":"129","severity":1,"message":"134","line":422,"column":46,"nodeType":"131","messageId":"132","endLine":422,"endColumn":48},{"ruleId":"129","severity":1,"message":"130","line":457,"column":55,"nodeType":"131","messageId":"132","endLine":457,"endColumn":57},"no-native-reassign",["154"],"no-negated-in-lhs",["155"],"no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'CardActionArea' is defined but never used.","Expected '!==' and instead saw '!='.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'filterarr' and 'searchQuery'. Either include them or remove the dependency array.","ArrayExpression",["156"],"no-redeclare","'title' is already defined.","redeclared","React Hook useEffect has missing dependencies: 'flag' and 'selectedMovie'. Either include them or remove the dependency array. You can also do a functional update 'setFlag(f => ...)' if you only need 'flag' in the 'setFlag' call.",["157"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'TablePagination' is defined but never used.","no-multi-str","Multiline support is limited to browsers supporting ES5 only.","Literal","multilineString","React Hook useEffect has missing dependencies: 'finalquery' and 'getmovies'. Either include them or remove the dependency array.",["158"],"no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [currPage, rowsPerPageVal, selectedMovie, flag, searchQuery, filterarr]",{"range":"165","text":"166"},"Update the dependencies array to be: [flag, searchQuery, selectedMovie]",{"range":"167","text":"168"},"Update the dependencies array to be: [currPage, finalquery, getmovies]",{"range":"169","text":"170"},[6455,6502],"[currPage, rowsPerPageVal, selectedMovie, flag, searchQuery, filterarr]",[6975,6988],"[flag, searchQuery, selectedMovie]",[5256,5266],"[currPage, finalquery, getmovies]"]